#pragma config(Sensor, in1,    InfraCollector, sensorReflection)
#pragma config(Sensor, dgtl1,  RedLED1,        sensorDigitalOut)
#pragma config(Sensor, dgtl2,  RedLED2,        sensorDigitalOut)
#pragma config(Sensor, dgtl5,  button1,        sensorTouch)
#pragma config(Sensor, dgtl6,  button2,        sensorTouch)
#pragma config(Sensor, dgtl7,  switch1,        sensorTouch)
#pragma config(Sensor, dgtl8,  switch2,        sensorTouch)
#pragma config(Sensor, dgtl9,  sonarSensor,    sensorSONAR_cm)
#pragma config(Motor,  port2,           rightMotor,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           leftMotor,     tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

bool button1_pushed;
bool button2_pushed;//da BUTTon
bool switch1_pushed;
bool switch2_pushed;
bool evergoneup;
bool evergonedown;
bool towardtarget; //robot is facing target
bool towardwall; //robot is facing wall
int infravalue;
int previnfravalue;
int sonarvalue;
int prevsonarvalue;

const   int sonarmax = 60; //value when moves forward
const   int mininfravalue = 2000; //value needs to be adjusted
const         int sonarthreshold = 5; //value needs to be adjusted
const   int OFF = 0; //for red LEDs
const   int ON  = 1; //for red LEDs

void monitorInput()
{
        if(SensorValue(button1) && !button1_pushed)        {
                button1_pushed = true;
                prevsonarvalue = SensorValue(sonarSensor);
                evergonedown = false;
                towardwall = false;
        }
        if(SensorValue(button2) && !button2_pushed)        {
                button2_pushed = true;
                previnfravalue = SensorValue(InfraCollector);
                evergoneup = false;
        }
        if(SensorValue(switch1) && !switch1_pushed)        {
                switch1_pushed = true;
        }
        if(SensorValue(switch2) && !switch2_pushed)        {
                switch2_pushed = true;
        }
        infravalue = SensorValue(InfraCollector);
        sonarvalue = SensorValue(sonarSensor);
}

void initializevariables()
{
        SensorValue(RedLED1)= OFF;
        SensorValue(RedLED2)= OFF;
        towardtarget = false;
        towardwall = false;
}

void ledindicators ()
{
        if(towardtarget && SensorValue(sonarSensor) <= sonarthreshold)
        {
                SensorValue(RedLED1)= ON;
                SensorValue(RedLED2)= OFF;
        }
        if(towardtarget && SensorValue(sonarSensor) > sonarthreshold)
        {
                SensorValue(RedLED1)= OFF;
                SensorValue(RedLED2)= ON;
        }
}

void timetodropobject() //robot has reached the wall
{
monitorInput();
        if(sonarvalue <= sonarthreshold && towardwall)
        {
                motor[rightMotor] = 0;
                motor[leftMotor] = 0;
        }
}

void locateinfraredsensor() //locates the infrared sensor
{
monitorInput();
        motor[rightMotor] = 40;
        motor[leftMotor] = -40;
        towardtarget = false;
        if((previnfravalue > infravalue) && evergoneup && (infravalue > mininfravalue))
        {
                motor[rightMotor] = 0;
                motor[leftMotor] = 0;
                button2_pushed = false;
                towardtarget = true;
        }

        else
        {
                if(previnfravalue < infravalue)
                {
                        evergoneup = true;
                }
                previnfravalue = infravalue;
        }
}

void locatewallright() //locates the wall to the right
{
monitorInput();
        if(SensorValue(sonarSensor) > sonarthreshold)
        {
                motor[rightMotor] = 40; //moves towards wall
                motor[leftMotor] = 40;
        }
        if(SensorValue(sonarSensor) < sonarmax)
        {
                motor[rightMotor] = -40;
                motor[leftMotor] = 40;
                if((prevsonarvalue < sonarvalue) && evergonedown)
                {
                        motor[rightMotor] = 40; //moves towards wall
                        motor[leftMotor] = 40;
                        towardwall = true;
                        button1_pushed = false;
                }
                else
                {
                        if(prevsonarvalue > sonarvalue)
                        {
                                evergonedown = true;
                        }
                        prevsonarvalue = sonarvalue;
                }
        }
 timetodropobject();

}


void bumbersensors() //in case robot hits wall at angle

{

        if(switch1_pushed)

        {

                motor[rightMotor] = 0;

                motor[leftMotor] = 0;

                wait1Msec(500);

                motor[rightMotor] = -40;

                motor[leftMotor] = -40;

                wait1Msec(300);

                motor[rightMotor] = -40;

                motor[leftMotor] = 40;

                wait1Msec(300);

                motor[rightMotor] = 0;

                motor[leftMotor] = 0;


wait1Msec(300);

        motor[rightMotor] = 40;

        motor[leftMotor] = 40;


                switch1_pushed = false;

                locatewallright();



        }

        if(switch2_pushed)

        {

                motor[rightMotor] = 0;

                motor[leftMotor] = 0;

                wait1Msec(500);

                motor[rightMotor] = -40;

                motor[leftMotor] = -40;

                wait1Msec(300);

                motor[rightMotor] = 40;

                motor[leftMotor] = -40;

                wait1Msec(300);

                motor[rightMotor] = 0;

                motor[leftMotor] = 0;


wait1Msec(300);

        motor[rightMotor] = 40;

        motor[leftMotor] = 40;


                switch2_pushed = false;

                
                locatewallright();



        }

}

task main()

{

        initializevariables(); //starting values for variables (bool, LED lights)

        while(true)

        {

                monitorInput();

                ledindicators();

                timetodropobject(); //indicates robot is close to wall

                bumbersensors();

                if(button2_pushed) //locates infrared sensor

                {

                        locateinfraredsensor();

                }



                if(button1_pushed) //locates wall

                {

                        locatewallright();

                }

        }

}